Return-Path: <freedreno-bounces@lists.freedesktop.org>
X-Original-To: lists+freedreno@lfdr.de
Delivered-To: lists+freedreno@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 855B625524
	for <lists+freedreno@lfdr.de>; Tue, 21 May 2019 18:14:29 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id 5193A8941D;
	Tue, 21 May 2019 16:14:28 +0000 (UTC)
X-Original-To: freedreno@lists.freedesktop.org
Delivered-To: freedreno@lists.freedesktop.org
Received: from smtp.codeaurora.org (smtp.codeaurora.org [198.145.29.96])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 5364289415
 for <freedreno@lists.freedesktop.org>; Tue, 21 May 2019 16:14:27 +0000 (UTC)
Received: by smtp.codeaurora.org (Postfix, from userid 1000)
 id DBEBF61A7D; Tue, 21 May 2019 16:14:19 +0000 (UTC)
X-Spam-Checker-Version: SpamAssassin 3.4.0 (2014-02-07) on
 pdx-caf-mail.web.codeaurora.org
X-Spam-Level: 
X-Spam-Status: No, score=-2.7 required=2.0 tests=ALL_TRUSTED,BAYES_00,
 DKIM_INVALID,DKIM_SIGNED,SPF_NONE autolearn=no autolearn_force=no
 version=3.4.0
Received: from jcrouse1-lnx.qualcomm.com (i-global254.qualcomm.com
 [199.106.103.254])
 (using TLSv1.2 with cipher ECDHE-RSA-AES128-SHA256 (128/128 bits))
 (No client certificate requested)
 (Authenticated sender: jcrouse@smtp.codeaurora.org)
 by smtp.codeaurora.org (Postfix) with ESMTPSA id 13D2A613A6;
 Tue, 21 May 2019 16:14:16 +0000 (UTC)
DMARC-Filter: OpenDMARC Filter v1.3.2 smtp.codeaurora.org 13D2A613A6
From: Jordan Crouse <jcrouse@codeaurora.org>
To: freedreno@lists.freedesktop.org
Date: Tue, 21 May 2019 10:13:53 -0600
Message-Id: <1558455243-32746-6-git-send-email-jcrouse@codeaurora.org>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1558455243-32746-1-git-send-email-jcrouse@codeaurora.org>
References: <1558455243-32746-1-git-send-email-jcrouse@codeaurora.org>
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=codeaurora.org; s=default; t=1558455267;
 bh=mPpWMT8VclLlXkDHcZku25yiK9JcrH0W+cJHnR3vCe4=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=CjjKy3EUXQf8EHebChqIK26qn02VqW/j3K7YlC9MhB73Ot327Yy/d7H98j+BPY43N
 Y1OhuMKsTAgdJRB3F0zI+vPnhi9uGRp+iMQA5mRKFe56Kz8bKbTUf8JQjtmwwa20MY
 ZTfICLYbkoDKD2T+LV2B6j+pHdhp8SK3NFFdmooI=
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple;
 d=codeaurora.org; s=default; t=1558455257;
 bh=mPpWMT8VclLlXkDHcZku25yiK9JcrH0W+cJHnR3vCe4=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=l0xwihPxMPObUCtHycTCB/OsfBwh3dlYMRoOSmVs9gyX3VnSaC8KueOMcgT5s8pST
 HDcr+x0GKU4uh99n51sZLlMDtUt+0GE/qQx1pzMRMnEMAbpkCqTl44lUjFhOi2Uiu+
 0bCFxnLI6vtwAzTC2oNXKHPcneKYNdQIOMz8beaA=
X-Mailman-Original-Authentication-Results: pdx-caf-mail.web.codeaurora.org;
 dmarc=none (p=none dis=none)
 header.from=codeaurora.org
X-Mailman-Original-Authentication-Results: pdx-caf-mail.web.codeaurora.org;
 spf=none
 smtp.mailfrom=jcrouse@codeaurora.org
Subject: [Freedreno] [PATCH v2 05/15] iommu/arm-smmu: Add auxiliary domain
 support for arm-smmuv2
X-BeenThere: freedreno@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Freedreno graphics driver community testing & development
 <freedreno.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/freedreno>,
 <mailto:freedreno-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/freedreno>
List-Post: <mailto:freedreno@lists.freedesktop.org>
List-Help: <mailto:freedreno-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/freedreno>,
 <mailto:freedreno-request@lists.freedesktop.org?subject=subscribe>
Cc: jean-philippe.brucker@arm.com, linux-arm-msm@vger.kernel.org,
 Joerg Roedel <joro@8bytes.org>, Will Deacon <will.deacon@arm.com>,
 dianders@chromium.org, linux-kernel@vger.kernel.org,
 iommu@lists.linux-foundation.org, hoegsberg@google.com,
 Robin Murphy <robin.murphy@arm.com>, linux-arm-kernel@lists.infradead.org
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: freedreno-bounces@lists.freedesktop.org
Sender: "Freedreno" <freedreno-bounces@lists.freedesktop.org>

U3VwcG9ydCBhdXhpbGlhcnkgZG9tYWlucyBmb3IgYXJtLXNtbXUtdjIgdG8gaW5pdGlhbGl6ZSBh
bmQgc3VwcG9ydAptdWx0aXBsZSBwYWdldGFibGVzIGZvciBhIHNpbmdsZSBTTU1VIGNvbnRleHQg
YmFuay4gU2luY2UgdGhlIHNtbXUtdjIKaGFyZHdhcmUgZG9lc24ndCBoYXZlIGFueSBidWlsdCBp
biBzdXBwb3J0IGZvciBzd2l0Y2hpbmcgdGhlIHBhZ2V0YWJsZQppdCBpcyBsZWZ0IGFzIGFuIGV4
ZXJjaXNlIHRvIHRoZSBjYWxsZXIgdG8gYWN0dWFsbHkgdXNlIHRoZSBwYWdldGFibGU7CmF1eCBk
b21haW5zIGluIHRoZSBJT01NVSBkcml2ZXIgYXJlIG9ubHkgcHJlb2NjdXBpZWQgd2l0aCBjcmVh
dGluZyBhbmQKbWFuYWdpbmcgdGhlIHBhZ2V0YWJsZSBtZW1vcnkuCgpGb2xsb3dpbmcgaXMgYSBw
c2V1ZG8gY29kZSBleGFtcGxlIG9mIGhvdyBhIGRvbWFpbiBjYW4gYmUgY3JlYXRlZAoKIC8qIENo
ZWNrIHRvIHNlZSBpZiBhdXggZG9tYWlucyBhcmUgc3VwcG9ydGVkICovCiBpZiAoaW9tbXVfZGV2
X2hhc19mZWF0dXJlKGRldiwgSU9NTVVfREVWX0ZFQVRfQVVYKSkgewoJIGlvbW11ID0gaW9tbXVf
ZG9tYWluX2FsbG9jKC4uLik7CgoJIGlmIChpb21tdV9hdXhfYXR0YWNoX2RldmljZShkb21haW4s
IGRldikpCgkJIHJldHVybiBGQUlMOwoKCS8qIFNhdmUgdGhlIGJhc2UgYWRkcmVzcyBvZiB0aGUg
cGFnZXRhYmxlIGZvciB1c2UgYnkgdGhlIGRyaXZlcgoJaW9tbXVfZG9tYWluX2dldF9hdHRyKGRv
bWFpbiwgRE9NQUlOX0FUVFJfUFRCQVNFLCAmcHRiYXNlKTsKIH0KClRoZW4gJ2RvbWFpbicgY2Fu
IGJlIHVzZWQgbGlrZSBhbnkgb3RoZXIgaW9tbXUgZG9tYWluIHRvIG1hcCBhbmQKdW5tYXAgaW92
YSBhZGRyZXNzZXMgaW4gdGhlIHBhZ2V0YWJsZS4gVGhlIGRyaXZlci9oYXJkd2FyZSBpcyB1c2Vk
CnRvIHN3aXRjaCB0aGUgcGFnZXRhYmxlIGFjY29yZGluZyB0byBpdHMgb3duIHNwZWNpZmljIGlt
cGxlbWVudGF0aW9uLgoKU2lnbmVkLW9mZi1ieTogSm9yZGFuIENyb3VzZSA8amNyb3VzZUBjb2Rl
YXVyb3JhLm9yZz4KLS0tCgogZHJpdmVycy9pb21tdS9hcm0tc21tdS5jIHwgMTMzICsrKysrKysr
KysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0tLS0tCiAxIGZpbGUgY2hhbmdlZCwg
MTE3IGluc2VydGlvbnMoKyksIDE2IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2RyaXZlcnMv
aW9tbXUvYXJtLXNtbXUuYyBiL2RyaXZlcnMvaW9tbXUvYXJtLXNtbXUuYwppbmRleCBlMDljMGU2
Li4yN2ZmNTU0IDEwMDY0NAotLS0gYS9kcml2ZXJzL2lvbW11L2FybS1zbW11LmMKKysrIGIvZHJp
dmVycy9pb21tdS9hcm0tc21tdS5jCkBAIC0yNjMsNiArMjYzLDggQEAgc3RydWN0IGFybV9zbW11
X2RvbWFpbiB7CiAJc3BpbmxvY2tfdAkJCWNiX2xvY2s7IC8qIFNlcmlhbGlzZXMgQVRTMSogb3Bz
IGFuZCBUTEIgc3luY3MgKi8KIAl1MzIgYXR0cmlidXRlczsKIAlzdHJ1Y3QgaW9tbXVfZG9tYWlu
CQlkb21haW47CisJYm9vbAkJCQlpc19hdXg7CisJdTY0CQkJCXR0YnIwOwogfTsKIAogc3RydWN0
IGFybV9zbW11X29wdGlvbl9wcm9wIHsKQEAgLTg5Miw2ICs4OTQsMTIgQEAgc3RhdGljIGludCBh
cm1fc21tdV9pbml0X2RvbWFpbl9jb250ZXh0KHN0cnVjdCBpb21tdV9kb21haW4gKmRvbWFpbiwK
IAlpZiAoIShzbW11LT5mZWF0dXJlcyAmIEFSTV9TTU1VX0ZFQVRfVFJBTlNfUzIpKQogCQlzbW11
X2RvbWFpbi0+c3RhZ2UgPSBBUk1fU01NVV9ET01BSU5fUzE7CiAKKwkvKiBBdXggZG9tYWlucyBj
YW4gb25seSBiZSBjcmVhdGVkIGZvciBzdGFnZS0xIHRhYmxlcyAqLworCWlmIChzbW11X2RvbWFp
bi0+aXNfYXV4ICYmIHNtbXVfZG9tYWluLT5zdGFnZSAhPSBBUk1fU01NVV9ET01BSU5fUzEpIHsK
KwkJcmV0ID0gLUVJTlZBTDsKKwkJZ290byBvdXRfdW5sb2NrOworCX0KKwogCS8qCiAJICogQ2hv
b3NpbmcgYSBzdWl0YWJsZSBjb250ZXh0IGZvcm1hdCBpcyBldmVuIG1vcmUgZmlkZGx5LiBVbnRp
bCB3ZQogCSAqIGdyb3cgc29tZSB3YXkgZm9yIHRoZSBjYWxsZXIgdG8gZXhwcmVzcyBhIHByZWZl
cmVuY2UsIGFuZC9vciBtb3ZlCkBAIC05NDIsNiArOTUwLDcgQEAgc3RhdGljIGludCBhcm1fc21t
dV9pbml0X2RvbWFpbl9jb250ZXh0KHN0cnVjdCBpb21tdV9kb21haW4gKmRvbWFpbiwKIAkJCWlh
cyA9IG1pbihpYXMsIDMyVUwpOwogCQkJb2FzID0gbWluKG9hcywgMzJVTCk7CiAJCX0KKwogCQlz
bW11X2RvbWFpbi0+dGxiX29wcyA9ICZhcm1fc21tdV9zMV90bGJfb3BzOwogCQlicmVhazsKIAlj
YXNlIEFSTV9TTU1VX0RPTUFJTl9ORVNURUQ6CkBAIC05NjEsNiArOTcwLDcgQEAgc3RhdGljIGlu
dCBhcm1fc21tdV9pbml0X2RvbWFpbl9jb250ZXh0KHN0cnVjdCBpb21tdV9kb21haW4gKmRvbWFp
biwKIAkJCWlhcyA9IG1pbihpYXMsIDQwVUwpOwogCQkJb2FzID0gbWluKG9hcywgNDBVTCk7CiAJ
CX0KKwogCQlpZiAoc21tdS0+dmVyc2lvbiA9PSBBUk1fU01NVV9WMikKIAkJCXNtbXVfZG9tYWlu
LT50bGJfb3BzID0gJmFybV9zbW11X3MyX3RsYl9vcHNfdjI7CiAJCWVsc2UKQEAgLTk3MCwyMyAr
OTgwLDMwIEBAIHN0YXRpYyBpbnQgYXJtX3NtbXVfaW5pdF9kb21haW5fY29udGV4dChzdHJ1Y3Qg
aW9tbXVfZG9tYWluICpkb21haW4sCiAJCXJldCA9IC1FSU5WQUw7CiAJCWdvdG8gb3V0X3VubG9j
azsKIAl9Ci0JcmV0ID0gX19hcm1fc21tdV9hbGxvY19iaXRtYXAoc21tdS0+Y29udGV4dF9tYXAs
IHN0YXJ0LAotCQkJCSAgICAgIHNtbXUtPm51bV9jb250ZXh0X2JhbmtzKTsKLQlpZiAocmV0IDwg
MCkKLQkJZ290byBvdXRfdW5sb2NrOwogCi0JY2ZnLT5jYm5keCA9IHJldDsKLQlpZiAoc21tdS0+
dmVyc2lvbiA8IEFSTV9TTU1VX1YyKSB7Ci0JCWNmZy0+aXJwdG5keCA9IGF0b21pY19pbmNfcmV0
dXJuKCZzbW11LT5pcnB0bmR4KTsKLQkJY2ZnLT5pcnB0bmR4ICU9IHNtbXUtPm51bV9jb250ZXh0
X2lycXM7Ci0JfSBlbHNlIHsKLQkJY2ZnLT5pcnB0bmR4ID0gY2ZnLT5jYm5keDsKLQl9CisJLyoK
KwkgKiBBdXggZG9tYWlucyB3aWxsIHVzZSB0aGUgc2FtZSBjb250ZXh0IGJhbmsgYXNzaWduZWQg
dG8gdGhlIG1hc3RlcgorCSAqIGRvbWFpbiBmb3IgdGhlIGRldmljZQorCSAqLworCWlmICghc21t
dV9kb21haW4tPmlzX2F1eCkgeworCQlyZXQgPSBfX2FybV9zbW11X2FsbG9jX2JpdG1hcChzbW11
LT5jb250ZXh0X21hcCwgc3RhcnQsCisJCQkJCSAgICAgIHNtbXUtPm51bV9jb250ZXh0X2Jhbmtz
KTsKKwkJaWYgKHJldCA8IDApCisJCQlnb3RvIG91dF91bmxvY2s7CiAKLQlpZiAoc21tdV9kb21h
aW4tPnN0YWdlID09IEFSTV9TTU1VX0RPTUFJTl9TMikKLQkJY2ZnLT52bWlkID0gY2ZnLT5jYm5k
eCArIDEgKyBzbW11LT5jYXZpdW1faWRfYmFzZTsKLQllbHNlCi0JCWNmZy0+YXNpZCA9IGNmZy0+
Y2JuZHggKyBzbW11LT5jYXZpdW1faWRfYmFzZTsKKwkJY2ZnLT5jYm5keCA9IHJldDsKKwkJaWYg
KHNtbXUtPnZlcnNpb24gPCBBUk1fU01NVV9WMikgeworCQkJY2ZnLT5pcnB0bmR4ID0gYXRvbWlj
X2luY19yZXR1cm4oJnNtbXUtPmlycHRuZHgpOworCQkJY2ZnLT5pcnB0bmR4ICU9IHNtbXUtPm51
bV9jb250ZXh0X2lycXM7CisJCX0gZWxzZSB7CisJCQljZmctPmlycHRuZHggPSBjZmctPmNibmR4
OworCQl9CisKKwkJaWYgKHNtbXVfZG9tYWluLT5zdGFnZSA9PSBBUk1fU01NVV9ET01BSU5fUzIp
CisJCQljZmctPnZtaWQgPSBjZmctPmNibmR4ICsgMSArIHNtbXUtPmNhdml1bV9pZF9iYXNlOwor
CQllbHNlCisJCQljZmctPmFzaWQgPSBjZmctPmNibmR4ICsgc21tdS0+Y2F2aXVtX2lkX2Jhc2U7
CisJfQogCiAJcGd0YmxfY2ZnID0gKHN0cnVjdCBpb19wZ3RhYmxlX2NmZykgewogCQkucGdzaXpl
X2JpdG1hcAk9IHNtbXUtPnBnc2l6ZV9iaXRtYXAsCkBAIC0xMDA5LDExICsxMDI2LDIxIEBAIHN0
YXRpYyBpbnQgYXJtX3NtbXVfaW5pdF9kb21haW5fY29udGV4dChzdHJ1Y3QgaW9tbXVfZG9tYWlu
ICpkb21haW4sCiAJCWdvdG8gb3V0X2NsZWFyX3NtbXU7CiAJfQogCisJLyogQ2FjaGUgdGhlIFRU
QlIwIGZvciB0aGUgYXV4IGRvbWFpbiAqLworCXNtbXVfZG9tYWluLT50dGJyMCA9IHBndGJsX2Nm
Zy5hcm1fbHBhZV9zMV9jZmcudHRiclswXTsKKwogCS8qIFVwZGF0ZSB0aGUgZG9tYWluJ3MgcGFn
ZSBzaXplcyB0byByZWZsZWN0IHRoZSBwYWdlIHRhYmxlIGZvcm1hdCAqLwogCWRvbWFpbi0+cGdz
aXplX2JpdG1hcCA9IHBndGJsX2NmZy5wZ3NpemVfYml0bWFwOwogCWRvbWFpbi0+Z2VvbWV0cnku
YXBlcnR1cmVfZW5kID0gKDFVTCA8PCBpYXMpIC0gMTsKIAlkb21haW4tPmdlb21ldHJ5LmZvcmNl
X2FwZXJ0dXJlID0gdHJ1ZTsKIAorCS8qCisJICogYXV4IGRvbWFpbnMgZG9uJ3QgdXNlIHNwbGl0
IHRhYmxlcyBvciBwcm9ncmFtIHRoZSBoYXJkd2FyZSBzbyB3ZSdyZQorCSAqIGRvbmUgc2V0dGlu
ZyBpdCB1cAorCSAqLworCWlmIChzbW11X2RvbWFpbi0+aXNfYXV4KQorCQlnb3RvIG91dDsKKwog
CS8qIEluaXRpYWxpc2UgdGhlIGNvbnRleHQgYmFuayB3aXRoIG91ciBwYWdlIHRhYmxlIGNmZyAq
LwogCWFybV9zbW11X2luaXRfY29udGV4dF9iYW5rKHNtbXVfZG9tYWluLCAmcGd0YmxfY2ZnKTsK
IApAQCAtMTA0NSw2ICsxMDcyLDcgQEAgc3RhdGljIGludCBhcm1fc21tdV9pbml0X2RvbWFpbl9j
b250ZXh0KHN0cnVjdCBpb21tdV9kb21haW4gKmRvbWFpbiwKIAkJY2ZnLT5pcnB0bmR4ID0gSU5W
QUxJRF9JUlBUTkRYOwogCX0KIAorb3V0OgogCW11dGV4X3VubG9jaygmc21tdV9kb21haW4tPmlu
aXRfbXV0ZXgpOwogCiAJLyogUHVibGlzaCBwYWdlIHRhYmxlIG9wcyBmb3IgbWFwL3VubWFwICov
CkBAIC0xMDcwLDYgKzEwOTgsMTIgQEAgc3RhdGljIHZvaWQgYXJtX3NtbXVfZGVzdHJveV9kb21h
aW5fY29udGV4dChzdHJ1Y3QgaW9tbXVfZG9tYWluICpkb21haW4pCiAJaWYgKCFzbW11IHx8IGRv
bWFpbi0+dHlwZSA9PSBJT01NVV9ET01BSU5fSURFTlRJVFkpCiAJCXJldHVybjsKIAorCS8qIEFs
bCB3ZSBuZWVkIHRvIGRvIGZvciBhdXggZGV2aWNlcyBpcyBkZXN0cm95IHRoZSBwYWdldGFibGUg
Ki8KKwlpZiAoc21tdV9kb21haW4tPmlzX2F1eCkgeworCQlmcmVlX2lvX3BndGFibGVfb3BzKHNt
bXVfZG9tYWluLT5wZ3RibF9vcHNbMF0pOworCQlyZXR1cm47CisJfQorCiAJcmV0ID0gYXJtX3Nt
bXVfcnBtX2dldChzbW11KTsKIAlpZiAocmV0IDwgMCkKIAkJcmV0dXJuOwpAQCAtMTM1MiwxNCAr
MTM4NiwxNyBAQCBzdGF0aWMgaW50IGFybV9zbW11X2RvbWFpbl9hZGRfbWFzdGVyKHN0cnVjdCBh
cm1fc21tdV9kb21haW4gKnNtbXVfZG9tYWluLAogCiBzdHJ1Y3QgYXJtX3NtbXVfY2xpZW50X21h
dGNoX2RhdGEgewogCWJvb2wgdXNlX2lkZW50aXR5X2RvbWFpbjsKKwlib29sIGFsbG93X2F1eF9k
b21haW47CiB9OwogCiBzdGF0aWMgY29uc3Qgc3RydWN0IGFybV9zbW11X2NsaWVudF9tYXRjaF9k
YXRhIHFjb21fYWRyZW5vID0gewogCS51c2VfaWRlbnRpdHlfZG9tYWluID0gdHJ1ZSwKKwkuYWxs
b3dfYXV4X2RvbWFpbiA9IHRydWUsCiB9OwogCiBzdGF0aWMgY29uc3Qgc3RydWN0IGFybV9zbW11
X2NsaWVudF9tYXRjaF9kYXRhIHFjb21fbWRzcyA9IHsKIAkudXNlX2lkZW50aXR5X2RvbWFpbiA9
IHRydWUsCisJLmFsbG93X2F1eF9kb21haW4gPSBmYWxzZSwKIH07CiAKIHN0YXRpYyBjb25zdCBz
dHJ1Y3Qgb2ZfZGV2aWNlX2lkIGFybV9zbW11X2NsaWVudF9vZl9tYXRjaFtdID0gewpAQCAtMTM3
OSw2ICsxNDE2LDU1IEBAIGFybV9zbW11X2NsaWVudF9kYXRhKHN0cnVjdCBkZXZpY2UgKmRldikK
IAlyZXR1cm4gbWF0Y2ggPyBtYXRjaC0+ZGF0YSA6IE5VTEw7CiB9CiAKK3N0YXRpYyBib29sIGFy
bV9zbW11X3N1cHBvcnRzX2F1eChzdHJ1Y3QgZGV2aWNlICpkZXYpCit7CisJY29uc3Qgc3RydWN0
IGFybV9zbW11X2NsaWVudF9tYXRjaF9kYXRhICpkYXRhID0KKwkJYXJtX3NtbXVfY2xpZW50X2Rh
dGEoZGV2KTsKKworCXJldHVybiAoZGF0YSAmJiBkYXRhLT5hbGxvd19hdXhfZG9tYWluKTsKK30K
Kworc3RhdGljIGJvb2wgYXJtX3NtbXVfZGV2X2hhc19mZWF0KHN0cnVjdCBkZXZpY2UgKmRldiwK
KwkJZW51bSBpb21tdV9kZXZfZmVhdHVyZXMgZmVhdCkKK3sKKwlpZiAoZmVhdCAhPSBJT01NVV9E
RVZfRkVBVF9BVVgpCisJCXJldHVybiBmYWxzZTsKKworCXJldHVybiBhcm1fc21tdV9zdXBwb3J0
c19hdXgoZGV2KTsKK30KKworc3RhdGljIGludCBhcm1fc21tdV9kZXZfZW5hYmxlX2ZlYXQoc3Ry
dWN0IGRldmljZSAqZGV2LAorCQllbnVtIGlvbW11X2Rldl9mZWF0dXJlcyBmZWF0KQoreworCS8q
IElmIHN1cHBvcnRlZCBhdXggZG9tYWluIHN1cHBvcnQgaXMgYWx3YXlzICJvbiIgKi8KKwlpZiAo
ZmVhdCA9PSBJT01NVV9ERVZfRkVBVF9BVVggJiYgYXJtX3NtbXVfc3VwcG9ydHNfYXV4KGRldikp
CisJCXJldHVybiAwOworCisJcmV0dXJuIC1FTk9ERVY7Cit9CisKK3N0YXRpYyBpbnQgYXJtX3Nt
bXVfZGV2X2Rpc2FibGVfZmVhdChzdHJ1Y3QgZGV2aWNlICpkZXYsCisJCWVudW0gaW9tbXVfZGV2
X2ZlYXR1cmVzIGZlYXQpCit7CisJcmV0dXJuIC1FQlVTWTsKK30KKworLyogU2V0IHVwIGEgbmV3
IGF1eCBkb21haW4gYW5kIGNyZWF0ZSBhIG5ldyBwYWdldGFibGUgd2l0aCB0aGUgc2FtZQorICog
Y2hhcmFjdGVyaXN0aWNzIGFzIHRoZSBtYXN0ZXIKKyAqLworc3RhdGljIGludCBhcm1fc21tdV9h
dXhfYXR0YWNoX2RldihzdHJ1Y3QgaW9tbXVfZG9tYWluICpkb21haW4sCisJCXN0cnVjdCBkZXZp
Y2UgKmRldikKK3sKKwlzdHJ1Y3QgaW9tbXVfZndzcGVjICpmd3NwZWMgPSBkZXZfaW9tbXVfZndz
cGVjX2dldChkZXYpOworCXN0cnVjdCBhcm1fc21tdV9kZXZpY2UgKnNtbXUgPSBmd3NwZWNfc21t
dShmd3NwZWMpOworCXN0cnVjdCBhcm1fc21tdV9kb21haW4gKnNtbXVfZG9tYWluID0gdG9fc21t
dV9kb21haW4oZG9tYWluKTsKKworCXNtbXVfZG9tYWluLT5pc19hdXggPSB0cnVlOworCisJLyog
Tm8gcG93ZXIgaXMgbmVlZGVkIGJlY2F1c2UgYXV4IGRvbWFpbiBkb2Vzbid0IHRvdWNoIHRoZSBo
YXJkd2FyZSAqLworCXJldHVybiBhcm1fc21tdV9pbml0X2RvbWFpbl9jb250ZXh0KGRvbWFpbiwg
c21tdSk7Cit9CisKIHN0YXRpYyBpbnQgYXJtX3NtbXVfYXR0YWNoX2RldihzdHJ1Y3QgaW9tbXVf
ZG9tYWluICpkb21haW4sIHN0cnVjdCBkZXZpY2UgKmRldikKIHsKIAlpbnQgcmV0OwpAQCAtMTQz
Nyw3ICsxNTIzLDEzIEBAIGFybV9zbW11X2dldF9wZ3RibF9vcHMoc3RydWN0IGlvbW11X2RvbWFp
biAqZG9tYWluLCB1bnNpZ25lZCBsb25nIGlvdmEpCiB7CiAJc3RydWN0IGFybV9zbW11X2RvbWFp
biAqc21tdV9kb21haW4gPSB0b19zbW11X2RvbWFpbihkb21haW4pOwogCXN0cnVjdCBhcm1fc21t
dV9jZmcgKmNmZyA9ICZzbW11X2RvbWFpbi0+Y2ZnOwotCXN0cnVjdCBhcm1fc21tdV9jYiAqY2Ig
PSAmc21tdV9kb21haW4tPnNtbXUtPmNic1tjZmctPmNibmR4XTsKKwlzdHJ1Y3QgYXJtX3NtbXVf
Y2IgKmNiOworCisJLyogcXVpY2sgZXNjYXBlIGZvciBkb21haW5zIHRoYXQgZG9uJ3QgaGF2ZSBz
cGxpdCBwYWdldGFibGVzIGVuYWJsZWQgKi8KKwlpZiAoIXNtbXVfZG9tYWluLT5wZ3RibF9vcHNb
MV0pCisJCXJldHVybiBzbW11X2RvbWFpbi0+cGd0Ymxfb3BzWzBdOworCisJY2IgPSAmc21tdV9k
b21haW4tPnNtbXUtPmNic1tjZmctPmNibmR4XTsKIAogCWlmIChpb3ZhICYgY2ItPnNwbGl0X3Rh
YmxlX21hc2spCiAJCXJldHVybiBzbW11X2RvbWFpbi0+cGd0Ymxfb3BzWzFdOwpAQCAtMTc3Nyw2
ICsxODY5LDExIEBAIHN0YXRpYyBpbnQgYXJtX3NtbXVfZG9tYWluX2dldF9hdHRyKHN0cnVjdCBp
b21tdV9kb21haW4gKmRvbWFpbiwKIAkJCQkhIShzbW11X2RvbWFpbi0+YXR0cmlidXRlcyAmCiAJ
CQkJICAgKDEgPDwgRE9NQUlOX0FUVFJfU1BMSVRfVEFCTEVTKSk7CiAJCQlyZXR1cm4gMDsKKwkJ
Y2FzZSBET01BSU5fQVRUUl9QVEJBU0U6CisJCQlpZiAoIXNtbXVfZG9tYWluLT5pc19hdXgpCisJ
CQkJcmV0dXJuIC1FTk9ERVY7CisJCQkqKCh1NjQgKilkYXRhKSA9IHNtbXVfZG9tYWluLT50dGJy
MDsKKwkJCXJldHVybiAwOwogCQlkZWZhdWx0OgogCQkJcmV0dXJuIC1FTk9ERVY7CiAJCX0KQEAg
LTE4ODcsNyArMTk4NCwxMSBAQCBzdGF0aWMgc3RydWN0IGlvbW11X29wcyBhcm1fc21tdV9vcHMg
PSB7CiAJLmNhcGFibGUJCT0gYXJtX3NtbXVfY2FwYWJsZSwKIAkuZG9tYWluX2FsbG9jCQk9IGFy
bV9zbW11X2RvbWFpbl9hbGxvYywKIAkuZG9tYWluX2ZyZWUJCT0gYXJtX3NtbXVfZG9tYWluX2Zy
ZWUsCisJLmRldl9oYXNfZmVhdAkJPSBhcm1fc21tdV9kZXZfaGFzX2ZlYXQsCisJLmRldl9lbmFi
bGVfZmVhdAk9IGFybV9zbW11X2Rldl9lbmFibGVfZmVhdCwKKwkuZGV2X2Rpc2FibGVfZmVhdAk9
IGFybV9zbW11X2Rldl9kaXNhYmxlX2ZlYXQsCiAJLmF0dGFjaF9kZXYJCT0gYXJtX3NtbXVfYXR0
YWNoX2RldiwKKwkuYXV4X2F0dGFjaF9kZXYJCT0gYXJtX3NtbXVfYXV4X2F0dGFjaF9kZXYsCiAJ
Lm1hcAkJCT0gYXJtX3NtbXVfbWFwLAogCS51bm1hcAkJCT0gYXJtX3NtbXVfdW5tYXAsCiAJLmZs
dXNoX2lvdGxiX2FsbAk9IGFybV9zbW11X2ZsdXNoX2lvdGxiX2FsbCwKLS0gCjIuNy40CgpfX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXwpGcmVlZHJlbm8gbWFp
bGluZyBsaXN0CkZyZWVkcmVub0BsaXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5m
cmVlZGVza3RvcC5vcmcvbWFpbG1hbi9saXN0aW5mby9mcmVlZHJlbm8=
